#BlueJ class context
comment0.params=
comment0.target=Value\ eval()
comment0.text=\ Evaluate\ a\ given\ Expr.\n\ @return\ the\ Value\ this\ Expr\ evaluates\ to.\n\ \ (In\ O0,\ all\ values\ are\ numbers\ (doubles),\ but\n\ \ \ in\ O3\ that\ will\ change,\ which\ is\ why\ we\ have\n\ \ \ pre-emptively\ made\ the\ return\ type\ 'Value'.)\n
comment1.params=
comment1.target=java.lang.String\ toString()
comment1.text=\ Return\ a\ String\ representation\ of\ this\ Expr.\n\ \ The\ result\ will\ be\ something\ which\ can\ be\n\ \ passed\ into\ 'parse(String)'\ to\ get\ the\ same\n\ \ Expr\ back.\ \ That\ is,\ toString\ and\ parse\ are\n\ \ inverses\ of\ each\ other.\n\ \ @return\ a\ String\ representation\ of\ this\ Expr.\n
comment2.params=s
comment2.target=Expr\ parse(java.lang.String)
comment2.text=\ Return\ (our\ internal\ representation\ of)\ the\ expression\ s.\n\ @param\ s\ The\ source\ code\ for\ exactly\ one\ Expr.\ \ Must\ by\ syntactically\ correct.\n\ @return\ (our\ internal\ representation\ of)\ the\ expression\ s.\n
comment3.params=s
comment3.target=Expr\ parse(java.util.Scanner)
comment3.text=\ Return\ (our\ internal\ representation\ of)\ the\ expression\ s.\n\ @param\ s\ A\ scanner\ reading\ the\ source\ code\ for\ exactly\ one\ Expr.\n\ \ \ \ \ \ \ \ \ \ Must\ by\ syntactically\ correct.\n\ @return\ (our\ internal\ representation\ of)\ the\ expression\ s.\n
comment4.params=
comment4.target=int\ hashCode()
comment4.text=@override.\ \ Used\ for\ fingerprinting\ only.
numComments=5
